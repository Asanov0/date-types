# Тема: Аты жок функциялар (Именовнные функции)!

# Аты аталган функциялар, def оператору, аталган/аты жок (анонимдуу)
# Python' догу функция оргументтерди алып, маани кайтарган обьект.
# Функция адата def оператору менен аныкталат.
# Def-Бул програмистин жумушун женилдетет жана кодту (питончиский ) кылып жазат 

# эн жонокой функцияны аныктайлы 


# def hi():
#     """Бул функция бизге салам жолдойт"""
#     text = "hello"
#     print(text)


# hi()


# Параметрлери жан алардын оргументтерин аныктайлы.

# def send_email(from_name): # Кашанын ичинде бул параметр!
#     """Данная функция выводит общии текст """
#     text = f"""Уважаемый Нурлан!
#     ВЫ приглашены на собеседование в банке Оптима
#     время 14:00, ждем вас!
#     С удовольсdтвием Банк {from_name}!"""
#     print(text)


# send_email('Оптима') # Бул жерде биз from_naem' ди аргумент катары беребиз 
# from_name'ди жазбасак деле болот.

# def lend(pay):
#     paying = "Омурбек"
#     bank = "BAKAI bank"
#     """Бул функция толомду эскертет"""
#     text = f""" Урмату {paying}! мырза сиздин толом убактыныз 
#     эртен 05.10.2022 эстен чыгарбаныз биздин банк {bank}  """
#     print(text)
#     return pay

# lend('pey')

# Аргумент отуу тартиби!
# Функцияларды чакырганда, аргумент катары берилген маанилерди жон эле
#  алмаштыра албайбыз.
# Туура аргумент жайгашкан функция!

# def names(name,msg):
#     print('Салам,'+ name,msg)


# names(name="Том", msg="Кандайсын!!!") 


# Функйиянын декларациясында аргументер туура эмес тартипте болгондугу:
# Туура эмес жайгашкан функция!

#def names(name,msg):
#     print('Салам,'+ name,msg)


# names(msg="Том", name="Кандайсын!!!")

# def func():
#     pass

# Белгисиз сандагы аргументтери бар функциялар!
# Эгерде функция канча баалуулуктарды иштеерин билбесе, анын аргументерин тизме 
# (список) катары орното алабыз.
# Бул учурда * белгиси тизменин аталышынын алдында жазылат. Бул жерде ысымдар
# белгисиз узундуктагы ысымдардын тизмеси. Функция аны кадимки тизме (список)
# Катары карайт.

# def say_goodbye(*names):
#     """Функция выведет приветствие для каждого
# имени из полученного names"""
#     for name in names:
#         print("Goodbye", name)


# say_goodbye('Monica','luke','Steve','John')


# Под тема: Оператор звездочка

# Оператор <<Звездочка>>!
# Этот оператор позволят <<Распаковыать>> обьекты, внунри которых хранятся некие элементы.

# Пиример:
# a = [1,2,3]
# b = [*a,4,5,6]
# print(b)             #[1,2,3,4,5,6]
# # Тут берётся содержимое списка a, распаковывается, и помещается в список b.
# lst = [1,2,3]
# tup = {*lst}
# print(tup)


# def add(*args):
#     print(args)
#     print(sum(args))


# add(1,2,3)

# 1) Ал эми биринчини (2ден коп параметр  жазганда калдонобуз )
# 2) Мисалы бул ылдыйкы (1 же 2 параметр ушинтип жазсак болот )

# def add(a,d):
#     print(a+d)


# add(1,6)


# def add(**kwargs):
#     print(kwargs)


# add(1,2,3,msg='hello python')
# (*args,) Бул не именовныйга жооп берет алмаштырбашыбыз керек ал эми бул (**kwargs) именовныеге 
# жооп берет 


# def hi (*my):
#     """Бул функция  салам жолдойт my"""
#     for i in my:
#       print(i,'hello')


# hi('Erlan','Mirlan','Marlen','Osmon')


# a = 44
# s = 5
# d = 6

# def sum(*args):
#     return args

# s = sum(a + s + d)
# print(s)









