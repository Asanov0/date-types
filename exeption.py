# Тема: python праграмалоо тилинде кездешкен каталар:

# Исключения в Python
# В любой, особенно большой, программе могут возникать ошибки, приводящие к ее неработоспособности или к тому, что программа делает не то, что должна. Причин возникновения ошибок много.
# Программист может сделать ошибку в употреблении самого языка программирования.  Другими словами, выразиться так, как выражаться не положено. Например, начать имя переменной с цифры или забыть поставить двоеточие в заголовке сложной инструкции. Подобные ошибки называют синтаксическими, они нарушают синтаксис и пунктуацию языка. Интерпретатор Питона, встретив ошибочное выражение, не знает как его интерпретировать. Поэтому останавливает выполнение программы и выводит соответствующее сообщение, указав на место возникновения ошибки:
# >>> 1a = 10
# File "<stdin>", line 1
# 1a = 10
# ^
# SyntaxError: invalid syntax
# В терминологии языка Python здесь возникло исключение, принадлежащее классу SyntaxError. Согласно документации Python синтаксические ошибки все-таки принято относить к ошибкам, а все остальные – к исключениям. В некоторых языках программирования не используется слово "исключение", а ошибки делят на синтаксические и семантические. Нарушение семантики обычно означает, что, хотя выражения написаны верно с точки зрения синтаксиса языка, программа не работает так, как от нее ожидалось. Для 
# name = "Tom"
# print(nams)              

# сравнения. Вы можете грамотным русским языком сказать несколько предложений, но по смыслу это будет белиберда, или вас поймут не так, как хотелось бы.
# В Python не говорят о семантических ошибках, говорят об исключениях. Их множество. В этом уроке мы рассмотрим некоторые из них, в последующих встретимся с еще несколькими.
# Если вы попытаетесь обратиться к переменной, которой не было присвоено значение, что в случае Python означает, что переменная вообще не была объявлена, она не существует, то возникнет исключение NameError.
# >>> a = 0
# >>> print(a + b)
# Traceback (most recent call last):
# File "<stdin>", line 1, in <module>
# NameError: name 'b' is not defined

# Так давайте теперь разберем ошибки:
# BaseException - базовое исключение, от которого берут начало все остальные.
# SystemExit - исключение, порождаемое функцией sys.exit при выходе из программы.
# Exception - а вот тут уже заканчиваются полностью системные исключения (которые лучше не трогать) и начинаются обыкновенные, с которыми можно работать.
# StopIteration - порождается встроенной функцией next, если в итераторе больше нет элементов.
# FloatingPointError - порождается при неудачном выполнении операции с плавающей запятой. На практике встречается нечасто.

# OverflowError - возникает, когда результат арифметической операции слишком велик для представления. Не появляется при обычной работе с целыми числами (так как python поддерживает длинные числа), но может возникать в некоторых других случаях.
# ZeroDivisionError - деление на ноль.
# AssertionError - выражение в функции assert ложно.
# AttributeError - объект не имеет данного атрибута (значения или метода).
# BufferError - операция, связанная с буфером, не может быть выполнена.
# EOFError - функция наткнулась на конец файла и не смогла прочитать то, что хотела.
# ImportError - не удалось импортирование модуля или его атрибута.
# LookupError - некорректный индекс или ключ.
# IndexError - индекс не входит в диапазон элементов.
# KeyError - несуществующий ключ (в словаре, множестве или другом объекте).
# MemoryError - недостаточно памяти.
# NameError - не найдено переменной с таким именем.
# UnboundLocalError - сделана ссылка на локальную переменную в функции, но переменная не определена ранее.
# OSError - ошибка, связанная с системой.
# BlockingIOError

# ChildProcessError - неудача при операции с дочерним процессом.
# ConnectionError - базовый класс для исключений, связанных с подключениями.
# FileExistsError - попытка создания файла или директории, которая уже существует.
# FileNotFoundError - файл или директория не существует.
# InterruptedError - системный вызов прерван входящим сигналом.
# IsADirectoryError - ожидался файл, но это директория.
# NotADirectoryError - ожидалась директория, но это файл.
# PermissionError - не хватает прав доступа.
# ProcessLookupError - указанного процесса не существует.
# TimeoutError - закончилось время ожидания.
# ReferenceError - попытка доступа к атрибуту со слабой ссылкой.
# RuntimeError - возникает, когда исключение не попадает ни под одну из других категорий.
# NotImplementedError - возникает, когда абстрактные методы класса требуют переопределения в дочерних классах.
# SyntaxError - синтаксическая ошибка.
# IndentationError - неправильные отступы.
# TabError - смешивание в отступах табуляции и пробелов.
# SystemError - внутренняя ошибка.

# TypeError - операция применена к объекту несоответствующего типа.
# ValueError - функция получает аргумент правильного типа, но некорректного значения.
# UnicodeError - ошибка, связанная с кодированием / раскодированием unicode в строках.
# UnicodeEncodeError - исключение, связанное с кодированием unicode.
# UnicodeDecodeError - исключение, связанное с декодированием unicode.
# UnicodeTranslateError - исключение, связанное с переводом unicode.
# Warning - предупреждение.
